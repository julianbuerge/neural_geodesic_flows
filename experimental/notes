We don't want to go back to the dataspace while doing dynamics.
Therefore we need to know which chart we are in, and where all the dataset points from
the relevant coordinate domain are in that chart (latent) and wether they are interior or boundary points.
This is why we now work with a state (chart_id, z) per default rather than with just an array z.

The model is now tied to the dataset more intimately. We need to have the dataset in the model
and then when doing training take it from the model and building a dataloader from it.
A thing with the dataset in the latent space is that if the encoder changes, it does too.
So how to do this in a modular and efficient way?
--> Need to build a smart graph strucuture, capable of being used for training and chart switching analysis
    (know for each point in the current chart if it is an interior or boundary point,
     and if a boundary, from what other chart is it an interior?)
